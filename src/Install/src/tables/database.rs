//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "database")]
pub struct Model {
    #[sea_orm(
        column_name = "Name",
        primary_key,
        auto_increment = false,
        column_type = "Text"
    )]
    pub name: String,
    #[sea_orm(column_name = "Uuid", primary_key, auto_increment = false, unique)]
    pub uuid: Uuid,
    #[sea_orm(column_name = "Time")]
    pub time: Option<DateTime>,
    #[sea_orm(column_name = "Hash", column_type = "Text", nullable)]
    pub hash: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::service::Entity")]
    Service,
}

impl Related<super::service::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Service.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
